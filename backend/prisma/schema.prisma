// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Énumération pour les rôles utilisateur
enum UserRole {
  USER
  ADMIN
}

// Énumération pour les statuts de facture
enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

// Modèle utilisateur avec système de rôles
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  company   String?
  role      UserRole  @default(USER)
  isActive  Boolean   @default(true)
  isBanned  Boolean   @default(false)
  lastLogin DateTime?
  loginCount Int      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations existantes
  invoices  Invoice[]
  clients   Client[]
  
  // Nouvelles relations pour l'admin
  subscriptions     Subscription[]
  payments          Payment[]
  tickets           Ticket[]
  assignedTickets   Ticket[]        @relation("AssignedTickets")
  ticketMessages    TicketMessage[]
  systemLogs        SystemLog[]
  siteSettings      SiteSetting[]
  promoUsages       PromoUsage[]
  emailCampaigns    EmailCampaign[]
  
  @@map("users")
}

// Modèle client
model Client {
  id        String    @id @default(cuid())
  name      String
  email     String
  phone     String?
  address   String?
  city      String?
  postalCode String?
  country   String?
  siret     String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices  Invoice[]
  
  @@map("clients")
}

// Modèle facture étendu
model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  title         String?
  description   String?
  amount        Float
  taxAmount     Float         @default(0)
  totalAmount   Float
  status        InvoiceStatus @default(DRAFT)
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  paidDate      DateTime?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId      String
  client        Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  items         InvoiceItem[]
  
  @@map("invoices")
}

// Modèle pour les lignes de facture
model InvoiceItem {
  id          String  @id @default(cuid())
  description String
  quantity    Float
  unitPrice   Float
  totalPrice  Float
  
  // Relations
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@map("invoice_items")
}

// Modèle pour les packs/offres
model Pack {
  id          String    @id @default(cuid())
  name        String    // Pack Pro, Export Premium, etc.
  description String?
  price       Float     // Prix en euros
  currency    String    @default("EUR")
  duration    Int       // Durée en jours (30 = 1 mois)
  features    Json      // Fonctionnalités incluses (JSON)
  limits      Json      // Limites (nb factures, etc.)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  subscriptions Subscription[]
  
  @@map("packs")
}

// Modèle pour les abonnements utilisateurs
model Subscription {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  packId      String
  pack        Pack      @relation(fields: [packId], references: [id])
  status      SubscriptionStatus @default(ACTIVE)
  startDate   DateTime  @default(now())
  endDate     DateTime
  stripeId    String?   // ID Stripe de l'abonnement
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  payments    Payment[]
  
  @@map("subscriptions")
}

// Modèle pour les paiements
model Payment {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  subscriptionId  String?
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])
  amount          Float
  currency        String    @default("EUR")
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?   // ID du paiement Stripe
  stripeInvoiceId String?   // ID de la facture Stripe
  method          String?   // card, sepa, etc.
  failureReason   String?   // Raison de l'échec
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("payments")
}

// Modèle pour les tickets de support
model Ticket {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  subject     String
  description String
  status      TicketStatus @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  category    String?     // PDF, Facturation, Compte, etc.
  assignedTo  String?     // ID de l'admin assigné
  assignedAdmin User?     @relation("AssignedTickets", fields: [assignedTo], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  messages    TicketMessage[]
  
  @@map("tickets")
}

// Messages des tickets
model TicketMessage {
  id        String   @id @default(cuid())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@map("ticket_messages")
}

// Modèle pour les logs système
model SystemLog {
  id        String    @id @default(cuid())
  level     LogLevel  @default(INFO)
  category  String    // AUTH, PDF, PAYMENT, etc.
  message   String
  details   Json?     // Détails supplémentaires
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  
  @@map("system_logs")
}

// Modèle pour les paramètres du site
model SiteSetting {
  id        String   @id @default(cuid())
  key       String   @unique // slogan, about_page, faq, etc.
  value     String   // Contenu
  type      String   @default("text") // text, json, boolean, number
  category  String   @default("general") // general, marketing, payment, etc.
  updatedAt DateTime @updatedAt
  updatedBy String?
  admin     User?    @relation(fields: [updatedBy], references: [id])
  
  @@map("site_settings")
}

// Modèle pour les codes promo
model PromoCode {
  id          String    @id @default(cuid())
  code        String    @unique
  description String?
  discount    Float     // Pourcentage ou montant fixe
  type        DiscountType @default(PERCENTAGE)
  maxUses     Int?      // Nombre max d'utilisations
  currentUses Int       @default(0)
  validFrom   DateTime  @default(now())
  validUntil  DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  usages      PromoUsage[]
  
  @@map("promo_codes")
}

// Utilisation des codes promo
model PromoUsage {
  id          String    @id @default(cuid())
  promoCodeId String
  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  usedAt      DateTime  @default(now())
  
  @@map("promo_usages")
}

// Modèle pour les campagnes email
model EmailCampaign {
  id          String    @id @default(cuid())
  name        String
  subject     String
  content     String    // HTML content
  status      CampaignStatus @default(DRAFT)
  targetUsers Json?     // Critères de ciblage
  sentCount   Int       @default(0)
  openCount   Int       @default(0)
  clickCount  Int       @default(0)
  scheduledAt DateTime?
  sentAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String
  admin       User      @relation(fields: [createdBy], references: [id])
  
  @@map("email_campaigns")
}

// Énumérations pour les nouveaux modèles
enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  SUSPENDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
}