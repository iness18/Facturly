#!/bin/bash

# üöÄ Script de d√©ploiement automatis√© pour Facturly
# Usage: ./scripts/deploy.sh [environment]
# Environments: staging, production

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de log
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
}

# V√©rifier les pr√©requis
check_prerequisites() {
    log "V√©rification des pr√©requis..."
    
    # V√©rifier Git
    if ! command -v git &> /dev/null; then
        error "Git n'est pas install√©"
    fi
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        error "Node.js n'est pas install√©"
    fi
    
    # V√©rifier npm
    if ! command -v npm &> /dev/null; then
        error "npm n'est pas install√©"
    fi
    
    # V√©rifier Heroku CLI
    if ! command -v heroku &> /dev/null; then
        warning "Heroku CLI n'est pas install√©. Installation recommand√©e pour le d√©ploiement backend."
    fi
    
    success "Pr√©requis v√©rifi√©s"
}

# V√©rifier que nous sommes sur la branche main
check_branch() {
    local current_branch=$(git branch --show-current)
    if [ "$current_branch" != "main" ]; then
        error "Vous devez √™tre sur la branche 'main' pour d√©ployer. Branche actuelle: $current_branch"
    fi
    success "Branche 'main' confirm√©e"
}

# V√©rifier l'√©tat du repository
check_git_status() {
    log "V√©rification de l'√©tat Git..."
    
    # V√©rifier s'il y a des modifications non commit√©es
    if ! git diff-index --quiet HEAD --; then
        error "Il y a des modifications non commit√©es. Veuillez commiter ou stasher vos changements."
    fi
    
    # V√©rifier s'il y a des fichiers non track√©s
    if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        warning "Il y a des fichiers non track√©s. Assurez-vous qu'ils ne sont pas importants."
    fi
    
    success "√âtat Git v√©rifi√©"
}

# Mettre √† jour depuis origin
update_from_origin() {
    log "Mise √† jour depuis origin/main..."
    git fetch origin
    git pull origin main
    success "Repository mis √† jour"
}

# Installer les d√©pendances
install_dependencies() {
    log "Installation des d√©pendances..."
    
    # Backend
    log "Installation des d√©pendances backend..."
    cd backend
    npm ci --only=production
    cd ..
    
    # Frontend
    log "Installation des d√©pendances frontend..."
    cd frontend
    npm ci --only=production
    cd ..
    
    success "D√©pendances install√©es"
}

# Tester le build
test_build() {
    log "Test des builds..."
    
    # Test build backend
    log "Test build backend..."
    cd backend
    npm run build
    cd ..
    
    # Test build frontend
    log "Test build frontend..."
    cd frontend
    npm run build
    cd ..
    
    success "Builds test√©s avec succ√®s"
}

# D√©ployer sur Heroku
deploy_heroku() {
    local app_name=$1
    
    if ! command -v heroku &> /dev/null; then
        warning "Heroku CLI non disponible. D√©ploiement manuel requis."
        return
    fi
    
    log "D√©ploiement sur Heroku ($app_name)..."
    
    # V√©rifier que l'app existe
    if ! heroku apps:info $app_name &> /dev/null; then
        error "L'application Heroku '$app_name' n'existe pas"
    fi
    
    # D√©ployer
    git push heroku main
    
    # V√©rifier le d√©ploiement
    heroku ps:scale web=1 -a $app_name
    
    success "D√©ploiement Heroku termin√©"
}

# V√©rifier le d√©ploiement
verify_deployment() {
    local frontend_url=$1
    local backend_url=$2
    
    log "V√©rification du d√©ploiement..."
    
    # V√©rifier le backend
    if command -v curl &> /dev/null; then
        log "Test du backend..."
        if curl -f -s "$backend_url" > /dev/null; then
            success "Backend accessible"
        else
            warning "Backend non accessible √† $backend_url"
        fi
        
        # Test de l'API d'authentification
        log "Test de l'API d'authentification..."
        if curl -f -s -X POST "$backend_url/auth/login" \
           -H "Content-Type: application/json" \
           -d '{"email":"admin@facturly.com","password":"Admin123!"}' > /dev/null; then
            success "API d'authentification fonctionnelle"
        else
            warning "API d'authentification non accessible"
        fi
    fi
    
    log "V√©rification manuelle recommand√©e:"
    log "- Frontend: $frontend_url"
    log "- Backend: $backend_url"
    log "- Test de connexion avec: admin@facturly.com / Admin123!"
}

# Fonction principale
main() {
    local environment=${1:-production}
    
    echo "üöÄ D√©ploiement Facturly - Environnement: $environment"
    echo "=================================================="
    
    # Configuration selon l'environnement
    case $environment in
        "staging")
            HEROKU_APP="facturly-backend-staging"
            FRONTEND_URL="https://staging--facturly.netlify.app"
            BACKEND_URL="https://facturly-backend-staging.herokuapp.com"
            ;;
        "production")
            HEROKU_APP="facturly-backend-prod"
            FRONTEND_URL="https://facturly.netlify.app"
            BACKEND_URL="https://facturly-backend-prod.herokuapp.com"
            ;;
        *)
            error "Environnement non support√©: $environment. Utilisez 'staging' ou 'production'"
            ;;
    esac
    
    # √âtapes de d√©ploiement
    check_prerequisites
    check_branch
    check_git_status
    update_from_origin
    install_dependencies
    test_build
    
    # D√©ploiement Heroku (si disponible)
    if command -v heroku &> /dev/null; then
        deploy_heroku $HEROKU_APP
    else
        warning "D√©ploiement Heroku manuel requis"
    fi
    
    # V√©rification
    verify_deployment $FRONTEND_URL $BACKEND_URL
    
    echo ""
    success "üéâ D√©ploiement termin√© !"
    echo ""
    log "Prochaines √©tapes:"
    log "1. V√©rifiez Netlify pour le d√©ploiement frontend automatique"
    log "2. Testez l'application sur: $FRONTEND_URL"
    log "3. V√©rifiez les logs Heroku: heroku logs --tail -a $HEROKU_APP"
    log "4. Configurez les variables d'environnement si n√©cessaire"
}

# Ex√©cuter le script
main "$@"